'use client';
import React, { useState, useEffect, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';

interface Message {
  id: number;
  text: string;
  sender: 'ai' | 'user';
  options?: string[];
}

interface TeacherDialogProps {
  onClose: () => void;
  teacherGender: 'male' | 'female';
  studentName: string;
  instrument: string;
}

export default function TeacherDialog({ onClose, teacherGender, studentName, instrument }: TeacherDialogProps) {
  const videoRef = useRef<HTMLVideoElement>(null);
  const [isVideoPlaying, setIsVideoPlaying] = useState(false);
  const [currentVideoUrl, setCurrentVideoUrl] = useState('');
  const [messages, setMessages] = useState<Message[]>([]);
  const [currentStep, setCurrentStep] = useState(0);

  // Her mesaj için video URL'leri
  const teacherVideos = {
    male: {
      greeting: '/teachers/male/greeting.mp4',
      ready: '/teachers/male/ready.mp4',
      excited: '/teachers/male/excited.mp4',
    },
    female: {
      greeting: '/teachers/female/greeting.mp4',
      ready: '/teachers/female/ready.mp4',
      excited: '/teachers/female/excited.mp4',
    }
  };

  const introScript = [
    {
      id: 1,
      text: `Merhaba ${studentName}! Ben senin ${instrument} öğretmenin olacağım.`,
      sender: 'ai'
    },
    {
      id: 2,
      text: 'Birlikte harika bir müzik yolculuğuna çıkacağız. Hazır mısın?',
      sender: 'ai',
      options: ['Evet, hazırım!', 'Biraz heyecanlıyım']
    },
    {
      id: 3,
      text: 'Mükemmel! Önce basit tekniklerle başlayacağız ve adım adım ilerleyeceğiz.',
      sender: 'ai'
    }
  ];

  // Video değiştirme fonksiyonu
  const changeVideo = async (messageId: number) => {
    const gender = teacherGender;
    let videoUrl = '';

    switch(messageId) {
      case 1:
        videoUrl = teacherVideos[gender].greeting;
        break;
      case 2:
        videoUrl = teacherVideos[gender].ready;
        break;
      case 3:
        videoUrl = teacherVideos[gender].excited;
        break;
      default:
        videoUrl = teacherVideos[gender].greeting;
    }

    setCurrentVideoUrl(videoUrl);
    if (videoRef.current) {
      videoRef.current.play();
      setIsVideoPlaying(true);
    }
  };

  // Mesajları sırayla göstermek için useEffect
  useEffect(() => {
    if (currentStep < introScript.length) {
      const timer = setTimeout(() => {
        setMessages(prev => [...prev, introScript[currentStep]]);
        changeVideo(introScript[currentStep].id);
        setCurrentStep(prev => prev + 1);
      }, 1500);

      return () => clearTimeout(timer);
    }
  }, [currentStep, introScript]);

  // Seçenek tıklandığında çalışacak fonksiyon
  const handleOption = (selectedOption: string, messageId: number) => {
    setMessages(prev => [...prev, {
      id: messageId + 0.5,
      text: selectedOption,
      sender: 'user'
    }]);
    setCurrentStep(prev => prev + 1);
  };

  return (
    <div className="bg-white rounded-xl shadow-xl max-w-2xl w-full mx-auto overflow-hidden">
      {/* Video Alanı */}
      <div className="h-96 bg-gradient-to-b from-indigo-100 to-white relative">
        <video
          ref={videoRef}
          className="w-full h-full object-cover"
          src={currentVideoUrl}
          onEnded={() => setIsVideoPlaying(false)}
          playsInline
          muted={false}
        />
      </div>

      {/* Mesajlaşma Alanı */}
      <div className="p-6 h-96 overflow-y-auto">
        <AnimatePresence>
          {messages.map((message, index) => (
            <motion.div
              key={message.id}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0 }}
              transition={{ duration: 0.3 }}
              className={`mb-4 ${message.sender === 'ai' ? 'text-left' : 'text-right'}`}
            >
              <div
                className={`inline-block p-4 rounded-xl ${
                  message.sender === 'ai'
                    ? 'bg-indigo-100 text-gray-800'
                    : 'bg-indigo-600 text-white'
                }`}
              >
                {message.text}
              </div>

              {message.options && (
                <div className="mt-4 space-y-2">
                  {message.options.map((option, idx) => (
                    <button
                      key={idx}
                      onClick={() => handleOption(option, message.id)}
                      className="w-full p-3 text-left border rounded-lg hover:bg-gray-50"
                    >
                      {option}
                    </button>
                  ))}
                </div>
              )}
            </motion.div>
          ))}
        </AnimatePresence>
      </div>
    </div>
  );
}