import React, { useState, useEffect } from 'react';
import Image from 'next/image';
import { Teacher, TeacherDialog as TeacherDialogType } from '@/types/teacher';

interface TeacherDialogProps {
  teacher: Teacher;
  currentDialog: TeacherDialogType;
  onOptionSelect?: (nextDialogId: string) => void;
  onClose?: () => void;
}

const TeacherDialog: React.FC<TeacherDialogProps> = ({
  teacher,
  currentDialog,
  onOptionSelect,
  onClose
}) => {
  const [isTyping, setIsTyping] = useState(true);
  const [displayedText, setDisplayedText] = useState('');

  // Typing animasyonu efekti
  useEffect(() => {
    setIsTyping(true);
    setDisplayedText('');
    let index = 0;
    
    const interval = setInterval(() => {
      if (index < currentDialog.content.length) {
        setDisplayedText(prev => prev + currentDialog.content[index]);
        index++;
      } else {
        setIsTyping(false);
        clearInterval(interval);
      }
    }, 30); // Yazma hızı

    return () => clearInterval(interval);
  }, [currentDialog.content]);

  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center p-4">
      <div className="bg-white rounded-2xl max-w-2xl w-full max-h-[80vh] overflow-hidden flex flex-col">
        {/* Header */}
        <div className="p-4 border-b flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div className={`w-12 h-12 rounded-full overflow-hidden ${teacher.backgroundColor}`}>
              <Image 
                src={teacher.avatar}
                alt={teacher.name}
                width={48}
                height={48}
                className="w-full h-full object-cover"
              />
            </div>
            <div>
              <h3 className="font-semibold">{teacher.name}</h3>
              <p className="text-sm text-gray-500">{teacher.personality.teachingStyle}</p>
            </div>
          </div>
          {onClose && (
            <button 
              onClick={onClose}
              className="text-gray-500 hover:text-gray-700"
            >
              ✕
            </button>
          )}
        </div>

        {/* Dialog Content */}
        <div className="p-6 flex-1 overflow-y-auto">
          <div className="prose max-w-none">
            <p>{displayedText}</p>
            {isTyping && <span className="animate-pulse">|</span>}
          </div>
        </div>

        {/* Options */}
        {!isTyping && currentDialog.options && (
          <div className="p-4 border-t bg-gray-50">
            <div className="space-y-2">
              {currentDialog.options.map((option) => (
                <button
                  key={option.id}
                  onClick={() => onOptionSelect?.(option.next)}
                  className="w-full p-3 text-left rounded-lg hover:bg-gray-100 transition-colors"
                >
                  {option.text}
                </button>
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default TeacherDialog;